{"version":3,"sources":["utils/fetchClient.ts","types/Errors.ts","PostsContext.tsx","api/posts.ts","components/Loader/Loader.tsx","components/CommentItem/CommentItem.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","components/UserSelector/UserSelector.tsx","components/PostsApp/PostsApp.tsx/PostsApp.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Errors","client","PostsContext","React","createContext","selectedUser","setSelectedUser","errorMessage","setErrorMessage","removeError","posts","loadingPosts","loadingComments","setLoadingComments","getAllUserPosts","selectedPost","setSelectedPost","getPostDetails","comments","setComments","openForm","setOpenForm","PostsProvider","children","useState","setPosts","setLoadingPosts","time","Provider","value","userId","getPosts","catch","finally","postId","getComments","usePosts","useContext","Loader","className","CommentItem","comment","id","email","name","handleDeleteComment","commentId","deleteComment","currentComments","filter","item","deletingComment","href","type","onClick","NewCommentForm","setName","setEmail","setBody","hasNameEmpty","setHasNameEmpty","hasEmailEmpty","setHasEmailEmpty","invalidEmail","setInvalidEmail","hasBodyEmpty","setHasBodyEmpty","isLoading","setIsLoading","validEmail","onSubmit","event","preventDefault","trimmedName","trim","trimmedEmail","trimmedBody","match","createdComment","addingComment","htmlFor","classNames","placeholder","onChange","target","PostDetails","title","length","map","PostsList","post","chosenPost","UserSelector","users","isDropdownActive","setIsDropdownActive","role","user","chosenUser","PostsApp","setUsers","useEffect","loadingUsers","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c8784c0.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Errors {\n  loadingUsers = 'Unable to load users',\n  loadingPosts = 'Unable to load user\\'s posts',\n  loadingComments = 'Unable to load post\\'s comments',\n  addingComment = 'Unable to add a comment',\n  deletingComment = 'Unable to delete a comment',\n}\n","import React, {\n  useContext,\n  useState,\n} from 'react';\n\nimport {\n  getComments,\n  getPosts,\n} from './api/posts';\n\nimport { Comment } from './types/Comment';\nimport { Errors } from './types/Errors';\nimport { Post } from './types/Post';\nimport { PostsContextType } from './types/PostsContextType';\nimport { User } from './types/User';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostsContext = React.createContext<PostsContextType>({\n  selectedUser: null,\n  setSelectedUser: () => {},\n  errorMessage: '',\n  setErrorMessage: () => {},\n  removeError: () => {},\n  posts: [],\n  loadingPosts: false,\n  loadingComments: false,\n  setLoadingComments: () => {},\n  getAllUserPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  getPostDetails: () => {},\n  comments: [],\n  setComments: () => {},\n  openForm: false,\n  setOpenForm: () => {},\n});\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [loadingComments, setLoadingComments] = useState<boolean>(false);\n  const [loadingPosts, setLoadingPosts] = useState<boolean>(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [openForm, setOpenForm] = useState<boolean>(false);\n\n  const removeError = (time = 3000) => {\n    setTimeout(() => {\n      setErrorMessage('');\n    }, time);\n  };\n\n  const getAllUserPosts = (userId: number) => {\n    setLoadingPosts(true);\n\n    getPosts(userId)\n      .then(setPosts)\n      .catch(() => {\n        setErrorMessage(Errors.loadingPosts);\n        removeError();\n      })\n      .finally(() => setLoadingPosts(false));\n  };\n\n  const getPostDetails = (postId: number) => {\n    setLoadingComments(true);\n\n    getComments(postId)\n      .then(setComments)\n      .catch(() => {\n        setErrorMessage(Errors.loadingComments);\n        removeError();\n      })\n      .finally(() => setLoadingComments(false));\n  };\n\n  return (\n    <PostsContext.Provider value={{\n      selectedUser,\n      setSelectedUser,\n      errorMessage,\n      setErrorMessage,\n      removeError,\n      posts,\n      loadingPosts,\n      loadingComments,\n      setLoadingComments,\n      getAllUserPosts,\n      selectedPost,\n      setSelectedPost,\n      getPostDetails,\n      comments,\n      setComments,\n      openForm,\n      setOpenForm,\n    }}\n    >\n      {children}\n    </PostsContext.Provider>\n  );\n};\n\nexport const usePosts = () => useContext(PostsContext);\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { deleteComment } from '../../api/posts';\nimport { usePosts } from '../../PostsContext';\nimport { Comment } from '../../types/Comment';\nimport { Errors } from '../../types/Errors';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment }) => {\n  const {\n    id,\n    email,\n    name,\n    body,\n  } = comment;\n\n  const {\n    setComments,\n    errorMessage,\n    setErrorMessage,\n    removeError,\n  } = usePosts();\n\n  const handleDeleteComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments(currentComments => currentComments\n          .filter(item => item.id !== commentId));\n      })\n      .catch(() => {\n        setErrorMessage(Errors.deletingComment);\n        removeError();\n      });\n  };\n\n  return (\n    <article\n      key={id}\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div\n        className=\"message-body\"\n        data-cy=\"CommentBody\"\n      >\n        {body}\n      </div>\n\n      {errorMessage === Errors.deletingComment && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"CommentsError\"\n        >\n          {Errors.deletingComment}\n        </div>\n      )}\n    </article>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { addComment } from '../../api/posts';\nimport { usePosts } from '../../PostsContext';\nimport { Errors } from '../../types/Errors';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    selectedPost,\n    errorMessage,\n    setErrorMessage,\n    setComments,\n    removeError,\n  } = usePosts();\n\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n\n  const [hasNameEmpty, setHasNameEmpty] = useState<boolean>(false);\n  const [hasEmailEmpty, setHasEmailEmpty] = useState<boolean>(false);\n  const [invalidEmail, setInvalidEmail] = useState<boolean>(false);\n  const [hasBodyEmpty, setHasBodyEmpty] = useState<boolean>(false);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setHasNameEmpty(false);\n    setHasEmailEmpty(false);\n    setHasBodyEmpty(false);\n    setInvalidEmail(false);\n  };\n\n  const handleNameChange = ((event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setHasNameEmpty(false);\n  });\n\n  const handleEmailChange = ((event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setHasEmailEmpty(false);\n    setInvalidEmail(false);\n  });\n\n  const handleBodyChange = ((event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n    setHasBodyEmpty(false);\n  });\n\n  const validEmail\n    = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const trimmedName = name.trim();\n    const trimmedEmail = email.trim();\n    const trimmedBody = body.trim();\n\n    setHasNameEmpty(!trimmedName);\n    setHasEmailEmpty(!trimmedEmail);\n    setHasBodyEmpty(!trimmedBody);\n\n    if (!trimmedEmail.match(validEmail)) {\n      setInvalidEmail(true);\n\n      return;\n    }\n\n    if (selectedPost) {\n      const createdComment = {\n        name: trimmedName,\n        email: trimmedEmail,\n        body: trimmedBody,\n        postId: selectedPost.id,\n      };\n\n      setIsLoading(true);\n\n      addComment(createdComment)\n        .then(response => {\n          setComments((currentComments) => [...currentComments, response]);\n\n          setBody('');\n        })\n        .catch(() => {\n          setErrorMessage(Errors.addingComment);\n          removeError();\n        })\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div\n        className=\"field\"\n        data-cy=\"NameField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-name\"\n        >\n          Author Name\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'has-icons-right': hasNameEmpty,\n          })}\n        >\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': hasNameEmpty,\n            })}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasNameEmpty && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"EmailField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-author-email\"\n        >\n          Author Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'has-icons-right': hasEmailEmpty || invalidEmail,\n          })}\n        >\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': hasEmailEmpty || invalidEmail,\n            })}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(hasEmailEmpty || invalidEmail) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailEmpty && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Email is required\n          </p>\n        )}\n\n        {invalidEmail && !hasEmailEmpty && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Please enter valid email\n          </p>\n        )}\n      </div>\n\n      <div\n        className=\"field\"\n        data-cy=\"BodyField\"\n      >\n        <label\n          className=\"label\"\n          htmlFor=\"comment-body\"\n        >\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': hasBodyEmpty,\n            })}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {hasBodyEmpty && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {errorMessage === Errors.addingComment && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          {Errors.addingComment}\n        </div>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\nimport { usePosts } from '../../PostsContext';\nimport { Errors } from '../../types/Errors';\nimport { CommentItem } from '../CommentItem/CommentItem';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    loadingComments,\n    errorMessage,\n    comments,\n    openForm,\n    setOpenForm,\n  } = usePosts();\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loadingComments && (<Loader />)}\n\n          {errorMessage === Errors.loadingComments && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              {Errors.loadingComments}\n            </div>\n          )}\n\n          {!comments.length && !loadingComments && !errorMessage && (\n            <p\n              className=\"title is-4\"\n              data-cy=\"NoCommentsMessage\"\n            >\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && !loadingComments && !errorMessage && (\n            <>\n              <p className=\"title is-4\">\n                Comments:\n              </p>\n              {comments.map(comment => (\n                <CommentItem key={comment.id} comment={comment} />\n              ))}\n            </>\n          )}\n        </div>\n      </div>\n\n      {openForm ? (\n        <NewCommentForm />\n      ) : (\n        <button\n          data-cy=\"WriteCommentButton\"\n          type=\"button\"\n          className=\"button is-link\"\n          onClick={() => setOpenForm(true)}\n        >\n          Write a comment\n        </button>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { usePosts } from '../../PostsContext';\nimport { Post } from '../../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts,\n    selectedPost,\n    setSelectedPost,\n    getPostDetails,\n    setOpenForm,\n  } = usePosts();\n\n  const handlePostSelect = (chosenPost: Post) => {\n    if (selectedPost === chosenPost) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(chosenPost);\n      getPostDetails(chosenPost.id);\n      setOpenForm(false);\n    }\n  };\n\n  return (\n    ((posts.length === 0) ? (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    ) : (\n      <div data-cy=\"PostsList\">\n        <p className=\"title\">Posts:</p>\n\n        <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n          <thead>\n            <tr className=\"has-background-link-light\">\n              <th>#</th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {posts.map((post: Post) => (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">\n                  {post.id}\n                </td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedPost !== post,\n                    })}\n                    onClick={() => handlePostSelect(post)}\n                  >\n                    {selectedPost !== post ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )\n    ));\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { usePosts } from '../../PostsContext';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[],\n};\n\nexport const UserSelector: React.FC<Props> = ({ users }) => {\n  const {\n    selectedUser,\n    setSelectedUser,\n    getAllUserPosts,\n    setSelectedPost,\n  } = usePosts();\n\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  const handleUserSelect = (chosenUser: User) => {\n    setSelectedUser(chosenUser);\n    setIsDropdownActive(false);\n    setSelectedPost(null);\n    getAllUserPosts(chosenUser.id);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(!isDropdownActive)}\n        >\n          <span>\n            {selectedUser ? (\n              selectedUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map((user: User) => {\n            return (\n              <a\n                href={`#user-${user.id}`}\n                onClick={() => handleUserSelect(user)}\n                className={classNames('dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { usePosts } from '../../../PostsContext';\nimport { Loader } from '../../Loader';\nimport { PostDetails } from '../../PostDetails/PostDetails';\nimport { PostsList } from '../../PostsList/PostsList';\nimport { UserSelector } from '../../UserSelector/UserSelector';\nimport { Errors } from '../../../types/Errors';\nimport { getUsers } from '../../../api/posts';\nimport { User } from '../../../types/User';\n\nexport const PostsApp: React.FC = () => {\n  const {\n    loadingPosts,\n    errorMessage,\n    setErrorMessage,\n    removeError,\n    selectedUser,\n    selectedPost,\n  } = usePosts();\n\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setErrorMessage(Errors.loadingUsers);\n        removeError();\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector users={users} />\n              </div>\n\n              <div\n                className=\"block\"\n                data-cy=\"MainContent\"\n              >\n                {!selectedUser && !loadingPosts && !errorMessage && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loadingPosts && (<Loader />)}\n\n                {errorMessage === Errors.loadingUsers && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {Errors.loadingUsers}\n                  </div>\n                )}\n\n                {selectedUser && (!loadingPosts) && (<PostsList />)}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames('tile is-parent is-8-desktop Sidebar', {\n              'Sidebar--open': selectedPost,\n            })}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsProvider } from './PostsContext';\nimport { PostsApp } from './components/PostsApp/PostsApp.tsx/PostsApp';\n\nexport const App: React.FC = () => {\n  return (\n    <PostsProvider>\n      <PostsApp />\n    </PostsProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}